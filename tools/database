#!/usr/bin/env bash

########################################################
###                        Help                      ###
########################################################

HELP='
Database.

Usage:

    database [action]

Parameters:

    * action

        database action.

        - syncLocalToRemote    Sync local and remote database.
'

########################################################
###                     Variables                    ###
########################################################

# Database name
if [[ -z $DB_NAME ]]; then

    # Project name
    if [[ -z $PROJECT_NAME ]]; then
        echo 'Error: set the "DB_NAME" or "PROJECT_NAME" variable'
        exit 1
    else
        DB_NAME="$PROJECT_NAME"
    fi
fi

# Dump file suffix
DUMP_FILE_SUFFIX='argz'

# Local dump file
if [[ -z $DUMP_FILE ]]; then
    DUMP_FILE="dump.$DUMP_FILE_SUFFIX"
fi

# Remote host
if [[ -z $REMOTE_HOST ]]; then
    echo 'Error: set the "REMOTE_HOST" variable'
    exit 1
fi

# Remote user
if [[ -z $REMOTE_USER ]]; then
    echo 'Error: set the "REMOTE_USER" variable'
    exit 1
fi

# Remote dump directory
if [[ -z $REMOTE_DUMP_DIR ]]; then
    echo 'Error: set the "REMOTE_DUMP_DIR" variable'
    exit 1
fi

# Build generation
if [[ -z $BUILD_GENERATION ]]; then
    BUILD_GENERATION='0.0'
fi

# Build number
if [[ -z $BUILD_NUMBER ]]; then
    echo 'Error: set the "BUILD_NUMBER" variable'
    exit 1
fi

REMOTE_DUMP_FILE="$BUILD_GENERATION.$BUILD_NUMBER.$DUMP_FILE_SUFFIX"

########################################################
###                      Export                      ###
########################################################

# Gzip compress level
export GZIP=-9

########################################################
###                      Helpers                     ###
########################################################

#
# Print a title of action
#
# @1 {string} Title
#
printTitle() {
    echo "===> $1"
}

#
# Create a local archive
#
createLocalDump() {
    printTitle "Removing \"$DUMP_FILE\" dump"

    rm -rf "$DUMP_FILE"

    printTitle "Dumping database \"$DB_NAME\" to \"$DUMP_FILE\" file"

    mongodump --db="$DB_NAME" --archive="$DUMP_FILE" --gzip
}

#
# Upload a local dump to a remote server
#
uploadLocalDump() {
    printTitle "Uploading \"$DUMP_FILE\" to $REMOTE_USER@$REMOTE_HOST:$REMOTE_DUMP_DIR/$REMOTE_DUMP_FILE"

    scp "$DUMP_FILE" "$REMOTE_USER@$REMOTE_HOST:$REMOTE_DUMP_DIR/$REMOTE_DUMP_FILE"
}

#
# Restore a dump on a remote server
#
restoreRemoteDump() {
    printTitle "Restoring dump from \"$REMOTE_DUMP_FILE\""

    ssh "$REMOTE_USER@$REMOTE_HOST" << REMOTE
        cd "$REMOTE_DUMP_DIR"

        echo "===> Restoring dump from \"$REMOTE_DUMP_FILE\""

        mongorestore --archive="$REMOTE_DUMP_FILE" --gzip --drop
REMOTE
}

########################################################
###                      Actions                     ###
########################################################

#
# Sync local and remote database
#
syncLocalToRemote() {
    createLocalDump
    uploadLocalDump
    restoreRemoteDump
}

#
# Help
#
help() {
    echo "$HELP"
}

########################################################
###                    Call action                   ###
########################################################

case $1 in
    syncLocalToRemote)
        $1
    ;;
    *)
        help
    ;;
esac
